<?xml version="1.0"?>
<doc>
    <assembly>
        <name>FlyleafLib</name>
    </assembly>
    <members>
        <member name="F:FlyleafLib.Controls.WinForms.FlyleafHost.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:FlyleafLib.Controls.WinForms.FlyleafHost.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:FlyleafLib.Controls.WinForms.FlyleafHost.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:FlyleafLib.Controls.WPF.FlyleafHost.Dispose">
            <summary>
            Disposes the Surface and Overlay Windows and de-assigns the Player
            </summary>
        </member>
        <member name="M:FlyleafLib.Controls.WPF.FlyleafHostOld.Dispose">
            <summary>
            Disposes the Surface and Overlay Windows and de-assigns the Player
            </summary>
        </member>
        <member name="T:FlyleafLib.Controls.WPF.FlyleafSharedOverlay">
            <summary>
            Shared Overlay on top of multiple FlyleafHosts
            </summary>
        </member>
        <member name="T:FlyleafLib.Controls.WPF.PlayerDebug">
            <summary>
            PlayerDebug
            </summary>
        </member>
        <member name="M:FlyleafLib.Controls.WPF.PlayerDebug.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:FlyleafLib.Config">
            <summary>
            Player's configuration
            </summary>
        </member>
        <member name="P:FlyleafLib.Config.Loaded">
            <summary>
            Whether configuration has been loaded from file
            </summary>
        </member>
        <member name="P:FlyleafLib.Config.LoadedPath">
            <summary>
            The path that this configuration has been loaded from
            </summary>
        </member>
        <member name="P:FlyleafLib.Config.PlayerConfig.AutoPlay">
            <summary>
            It will automatically start playing after open or seek after ended
            </summary>
        </member>
        <member name="P:FlyleafLib.Config.PlayerConfig.MinBufferDuration">
            <summary>
            Required buffered duration ticks before playing
            </summary>
        </member>
        <member name="P:FlyleafLib.Config.PlayerConfig.KeyBindings">
            <summary>
            Key bindings configuration
            </summary>
        </member>
        <member name="P:FlyleafLib.Config.PlayerConfig.IdleFps">
            <summary>
            Fps while the player is not playing
            </summary>
        </member>
        <member name="P:FlyleafLib.Config.PlayerConfig.MaxLatency">
            <summary>
            Max Latency (ticks) forces playback (with speed x1+) to stay at the end of the live network stream (default: 0 - disabled)
            </summary>
        </member>
        <member name="P:FlyleafLib.Config.PlayerConfig.MinLatency">
            <summary>
            Min Latency (ticks) prevents MaxLatency to go (with speed x1) less than this limit (default: 0 - as low as possible)
            </summary>
        </member>
        <member name="P:FlyleafLib.Config.PlayerConfig.LatencySpeedChangeInterval">
            <summary>
            Prevents frequent speed changes when MaxLatency is enabled (to avoid audio/video gaps and desyncs)
            </summary>
        </member>
        <member name="P:FlyleafLib.Config.PlayerConfig.FolderRecordings">
            <summary>
            Folder to save recordings (when filename is not specified)
            </summary>
        </member>
        <member name="P:FlyleafLib.Config.PlayerConfig.FolderSnapshots">
            <summary>
            Folder to save snapshots (when filename is not specified)
            </summary>
        </member>
        <member name="P:FlyleafLib.Config.PlayerConfig.SeekAccurate">
            <summary>
            Forces CurTime/SeekBackward/SeekForward to seek accurate on video
            </summary>
        </member>
        <member name="P:FlyleafLib.Config.PlayerConfig.SnapshotFormat">
            <summary>
            Snapshot encoding will be used (valid formats bmp, png, jpg/jpeg)
            </summary>
        </member>
        <member name="P:FlyleafLib.Config.PlayerConfig.Stats">
            <summary>
            Whether to refresh statistics about bitrates/fps/drops etc.
            </summary>
        </member>
        <member name="P:FlyleafLib.Config.PlayerConfig.ThreadPriority">
            <summary>
            Sets playback's thread priority
            </summary>
        </member>
        <member name="P:FlyleafLib.Config.PlayerConfig.UICurTimePerFrame">
            <summary>
            Refreshes CurTime in UI on every frame (can cause performance issues)
            </summary>
        </member>
        <member name="P:FlyleafLib.Config.PlayerConfig.VolumeMax">
            <summary>
            The upper limit of the volume amplifier
            </summary>
        </member>
        <member name="P:FlyleafLib.Config.PlayerConfig.Usage">
            <summary>
            The purpose of the player
            </summary>
        </member>
        <member name="P:FlyleafLib.Config.DemuxerConfig.AllowFindStreamInfo">
            <summary>
            Whethere to allow avformat_find_stream_info during open (avoiding this can open the input faster but it could cause other issues)
            </summary>
        </member>
        <member name="P:FlyleafLib.Config.DemuxerConfig.AllowInterrupts">
            <summary>
            Whether to enable demuxer's custom interrupt callback (for timeouts and interrupts)
            </summary>
        </member>
        <member name="P:FlyleafLib.Config.DemuxerConfig.AllowReadInterrupts">
            <summary>
            Whether to allow interrupts during av_read_frame
            </summary>
        </member>
        <member name="P:FlyleafLib.Config.DemuxerConfig.AllowTimeouts">
            <summary>
            Whether to allow timeouts checks within the interrupts callback
            </summary>
        </member>
        <member name="P:FlyleafLib.Config.DemuxerConfig.ExcludeInterruptFmts">
            <summary>
            List of FFmpeg formats to be excluded from interrupts
            </summary>
        </member>
        <member name="P:FlyleafLib.Config.DemuxerConfig.BufferDuration">
            <summary>
            Maximum allowed duration ticks for buffering
            </summary>
        </member>
        <member name="P:FlyleafLib.Config.DemuxerConfig.BufferPackets">
            <summary>
            Maximuim allowed packets for buffering (as an extra check along with BufferDuration)
            </summary>
        </member>
        <member name="P:FlyleafLib.Config.DemuxerConfig.MaxAudioPackets">
            <summary>
            Maximuim allowed audio packets (when reached it will drop the extra packets and will fire the AudioLimit event)
            </summary>
        </member>
        <member name="P:FlyleafLib.Config.DemuxerConfig.MaxErrors">
            <summary>
            Maximum allowed errors before stopping
            </summary>
        </member>
        <member name="P:FlyleafLib.Config.DemuxerConfig.IOStreamBufferSize">
            <summary>
            Custom IO Stream buffer size (in bytes) for the AVIO Context
            </summary>
        </member>
        <member name="P:FlyleafLib.Config.DemuxerConfig.CloseTimeout">
            <summary>
            avformat_close_input timeout (ticks) for protocols that support interrupts
            </summary>
        </member>
        <member name="P:FlyleafLib.Config.DemuxerConfig.OpenTimeout">
            <summary>
            avformat_open_input + avformat_find_stream_info timeout (ticks) for protocols that support interrupts (should be related to probesize/analyzeduration)
            </summary>
        </member>
        <member name="P:FlyleafLib.Config.DemuxerConfig.ReadTimeout">
            <summary>
            av_read_frame timeout (ticks) for protocols that support interrupts
            </summary>
        </member>
        <member name="P:FlyleafLib.Config.DemuxerConfig.ReadLiveTimeout">
            <summary>
            av_read_frame timeout (ticks) for protocols that support interrupts (for Live streams)
            </summary>
        </member>
        <member name="P:FlyleafLib.Config.DemuxerConfig.SeekTimeout">
            <summary>
            av_seek_frame timeout (ticks) for protocols that support interrupts
            </summary>
        </member>
        <member name="P:FlyleafLib.Config.DemuxerConfig.ForceFormat">
            <summary>
            Forces Input Format
            </summary>
        </member>
        <member name="P:FlyleafLib.Config.DemuxerConfig.ForceFPS">
            <summary>
            Forces FPS for NoTimestamp formats (such as h264/hevc)
            </summary>
        </member>
        <member name="P:FlyleafLib.Config.DemuxerConfig.FormatFlags">
            <summary>
            FFmpeg's format flags for demuxer (see https://ffmpeg.org/doxygen/trunk/avformat_8h.html)
            eg. FormatFlags |= 0x40; // For AVFMT_FLAG_NOBUFFER
            </summary>
        </member>
        <member name="P:FlyleafLib.Config.DemuxerConfig.FormatOptToUnderlying">
            <summary>
            Certain muxers and demuxers do nesting (they open one or more additional internal format contexts). This will pass the FormatOpt to the underlying contexts)
            </summary>
        </member>
        <member name="P:FlyleafLib.Config.DemuxerConfig.FormatOpt">
            <summary>
            FFmpeg's format options for demuxer
            </summary>
        </member>
        <member name="P:FlyleafLib.Config.DecoderConfig.VideoThreads">
            <summary>
            Threads that will be used from the decoder
            </summary>
        </member>
        <member name="P:FlyleafLib.Config.DecoderConfig.MaxVideoFrames">
            <summary>
            Maximum video frames to be decoded and processed for rendering
            </summary>
        </member>
        <member name="P:FlyleafLib.Config.DecoderConfig.MaxAudioFrames">
            <summary>
            Maximum audio frames to be decoded and processed for playback
            </summary>
        </member>
        <member name="P:FlyleafLib.Config.DecoderConfig.MaxSubsFrames">
            <summary>
            Maximum subtitle frames to be decoded
            </summary>
        </member>
        <member name="P:FlyleafLib.Config.DecoderConfig.MaxErrors">
            <summary>
            Maximum allowed errors before stopping
            </summary>
        </member>
        <member name="P:FlyleafLib.Config.DecoderConfig.ZeroCopy">
            <summary>
            Whether or not to use decoder's textures directly as shader resources
            (TBR: Better performance but might need to be disabled while video input has padding or not supported by older Direct3D versions)
            </summary>
        </member>
        <member name="P:FlyleafLib.Config.DecoderConfig.AllowProfileMismatch">
            <summary>
            Allows video accceleration even in codec's profile mismatch
            </summary>
        </member>
        <member name="P:FlyleafLib.Config.DecoderConfig.ShowCorrupted">
            <summary>
            Allows corrupted frames (Parses AV_CODEC_FLAG_OUTPUT_CORRUPT to AVCodecContext)
            </summary>
        </member>
        <member name="P:FlyleafLib.Config.DecoderConfig.LowDelay">
            <summary>
            Forces low delay (Parses AV_CODEC_FLAG_LOW_DELAY to AVCodecContext) (auto-enabled with MaxLatency)
            </summary>
        </member>
        <member name="P:FlyleafLib.Config.VideoConfig.GPUAdapter">
            <summary>
            <para>Forces a specific GPU Adapter to be used by the renderer</para>
            <para>GPUAdapter must match with the description of the adapter eg. rx 580 (available adapters can be found in Engine.Video.GPUAdapters)</para>
            </summary>
        </member>
        <member name="P:FlyleafLib.Config.VideoConfig.AspectRatio">
            <summary>
            Video aspect ratio
            </summary>
        </member>
        <member name="P:FlyleafLib.Config.VideoConfig.CustomAspectRatio">
            <summary>
            Custom aspect ratio (AspectRatio must be set to Custom to have an effect)
            </summary>
        </member>
        <member name="P:FlyleafLib.Config.VideoConfig.BackgroundColor">
            <summary>
            Background color of the player's control
            </summary>
        </member>
        <member name="P:FlyleafLib.Config.VideoConfig.ClearScreenOnOpen">
            <summary>
            Delays the clear screen of the last frame until the new input has been opened
            </summary>
        </member>
        <member name="P:FlyleafLib.Config.VideoConfig.Enabled">
            <summary>
            Whether video should be allowed
            </summary>
        </member>
        <member name="P:FlyleafLib.Config.VideoConfig.MaxVerticalResolutionAuto">
            <summary>
            The max resolution that the current system can achieve and will be used from the input/stream suggester plugins
            </summary>
        </member>
        <member name="P:FlyleafLib.Config.VideoConfig.MaxVerticalResolutionCustom">
            <summary>
            Custom max vertical resolution that will be used from the input/stream suggester plugins
            </summary>
        </member>
        <member name="P:FlyleafLib.Config.VideoConfig.MaxVerticalResolution">
            <summary>
            The max resolution that is currently used (based on Auto/Custom)
            </summary>
        </member>
        <member name="P:FlyleafLib.Config.VideoConfig.SwsHighQuality">
            <summary>
            In case of no hardware accelerated or post process accelerated pixel formats will use FFmpeg's SwsScale
            </summary>
        </member>
        <member name="P:FlyleafLib.Config.VideoConfig.SwsForce">
            <summary>
            Forces SwsScale instead of FlyleafVP for non HW decoded frames
            </summary>
        </member>
        <member name="P:FlyleafLib.Config.VideoConfig.VideoAcceleration">
            <summary>
            Activates Direct3D video acceleration (decoding)
            </summary>
        </member>
        <member name="P:FlyleafLib.Config.VideoConfig.VideoProcessor">
            <summary>
            Whether to use embedded video processor with custom pixel shaders or D3D11
            (Currently D3D11 works only on video accelerated / hardware surfaces)
            * FLVP supports HDR to SDR, D3D11 does not
            * FLVP supports Pan Move/Zoom, D3D11 does not
            * D3D11 possible performs better with color conversion and filters, FLVP supports only brightness/contrast filters
            * D3D11 supports deinterlace (bob)
            </summary>
        </member>
        <member name="P:FlyleafLib.Config.VideoConfig.VSync">
            <summary>
            Whether Vsync should be enabled (0: Disabled, 1: Enabled)
            </summary>
        </member>
        <member name="P:FlyleafLib.Config.VideoConfig.Deinterlace">
            <summary>
            Enables the video processor to perform post process deinterlacing
            (D3D11 video processor should be enabled and support bob deinterlace method)
            </summary>
        </member>
        <member name="P:FlyleafLib.Config.VideoConfig.HDRtoSDRMethod">
            <summary>
            The HDR to SDR method that will be used by the pixel shader
            </summary>
        </member>
        <member name="P:FlyleafLib.Config.VideoConfig.HDRtoSDRTone">
            <summary>
            The HDR to SDR Tone float correnction (not used by Reinhard) 
            </summary>
        </member>
        <member name="P:FlyleafLib.Config.VideoConfig.Swap10Bit">
            <summary>
            Whether the renderer will use 10-bit swap chaing or 8-bit output
            </summary>
        </member>
        <member name="P:FlyleafLib.Config.VideoConfig.SwapBuffers">
            <summary>
            The number of buffers to use for the renderer's swap chain
            </summary>
        </member>
        <member name="P:FlyleafLib.Config.VideoConfig.SwapForceR8G8B8A8">
            <summary>
            <para>
            Whether the renderer will use R8G8B8A8_UNorm instead of B8G8R8A8_UNorm format for the swap chain (experimental)
            (TBR: causes slightly different colors with D3D11VP)
            </para>
            </summary>
        </member>
        <member name="P:FlyleafLib.Config.AudioConfig.Delay">
            <summary>
            Audio delay ticks (will be reseted to 0 for every new audio stream)
            </summary>
        </member>
        <member name="P:FlyleafLib.Config.AudioConfig.Enabled">
            <summary>
            Whether audio should allowed
            </summary>
        </member>
        <member name="P:FlyleafLib.Config.AudioConfig.FiltersEnabled">
            <summary>
            <para>
            Whether to process samples with Filters or SWR (experimental)
            1. Requires FFmpeg avfilter lib
            2. Currently SWR performs better if you dont need filters
            </para>
            </summary>
        </member>
        <member name="P:FlyleafLib.Config.AudioConfig.Filters">
            <summary>
            <para>
            List of filters for post processing the audio samples (experimental)
            (Requires FiltersEnabled)
            </para>
            </summary>
        </member>
        <member name="P:FlyleafLib.Config.AudioConfig.Languages">
            <summary>
            Audio languages preference by priority
            </summary>
        </member>
        <member name="P:FlyleafLib.Config.SubtitlesConfig.Delay">
            <summary>
            Subtitle delay ticks (will be reseted to 0 for every new subtitle stream)
            </summary>
        </member>
        <member name="P:FlyleafLib.Config.SubtitlesConfig.Enabled">
            <summary>
            Whether subtitles should be allowed
            </summary>
        </member>
        <member name="P:FlyleafLib.Config.SubtitlesConfig.Languages">
            <summary>
            Subtitle languages preference by priority
            </summary>
        </member>
        <member name="P:FlyleafLib.Config.SubtitlesConfig.SearchLocal">
            <summary>
            Whether to use local search plugins (see also <see cref="P:FlyleafLib.Config.SubtitlesConfig.SearchLocalOnInputType"/>)
            </summary>
        </member>
        <member name="P:FlyleafLib.Config.SubtitlesConfig.SearchLocalOnInputType">
            <summary>
            Allowed input types to be searched locally for subtitles (empty list allows all types)
            </summary>
        </member>
        <member name="P:FlyleafLib.Config.SubtitlesConfig.SearchOnline">
            <summary>
            Whether to use online search plugins (see also <see cref="P:FlyleafLib.Config.SubtitlesConfig.SearchOnlineOnInputType"/>)
            </summary>
        </member>
        <member name="P:FlyleafLib.Config.SubtitlesConfig.SearchOnlineOnInputType">
            <summary>
            Allowed input types to be searched online for subtitles (empty list allows all types)
            </summary>
        </member>
        <member name="P:FlyleafLib.Config.SubtitlesConfig.Parser">
            <summary>
            Subtitles parser (can be used for custom parsing)
            </summary>
        </member>
        <member name="T:FlyleafLib.EngineConfig">
            <summary>
            Engine's configuration
            </summary>
        </member>
        <member name="P:FlyleafLib.EngineConfig.DisableAudio">
            <summary>
            It will not initiallize audio and will be disabled globally
            </summary>
        </member>
        <member name="P:FlyleafLib.EngineConfig.FFmpegPath">
            <summary>
            <para>Required to register ffmpeg libraries. Make sure you provide x86 or x64 based on your project.</para>
            <para>:&lt;path&gt; for relative path from current folder or any below</para>
            <para>&lt;path&gt; for absolute or relative path</para>
            </summary>
        </member>
        <member name="P:FlyleafLib.EngineConfig.FFmpegDevices">
            <summary>
            <para>Whether to register av devices or not (gdigrab/dshow/etc.)</para>
            <para>When enabled you can pass urls in this format device://[device_name]?[FFmpeg_Url]</para>
            <para>device://gdigrab?desktop</para>
            <para>device://gdigrab?title=Command Prompt</para>
            <para>device://dshow?video=Lenovo Camera</para>
            <para>device://dshow?audio=Microphone (Relatek):video=Lenovo Camera</para>
            </summary>
        </member>
        <member name="P:FlyleafLib.EngineConfig.FFmpegHLSLiveSeek">
            <summary>
            Whether to allow HLS live seeking (this can cause segmentation faults in case of incompatible ffmpeg version with library's custom structures)
            </summary>
        </member>
        <member name="P:FlyleafLib.EngineConfig.FFmpegLogLevel">
            <summary>
            Sets FFmpeg logger's level
            </summary>
        </member>
        <member name="P:FlyleafLib.EngineConfig.Loaded">
            <summary>
            Whether configuration has been loaded from file
            </summary>
        </member>
        <member name="P:FlyleafLib.EngineConfig.LoadedPath">
            <summary>
            The path that this configuration has been loaded from
            </summary>
        </member>
        <member name="P:FlyleafLib.EngineConfig.LogOutput">
            <summary>
            <para>Sets loggers output</para>
            <para>:debug -> System.Diagnostics.Debug</para>
            <para>:console -> System.Console</para>
            <para>&lt;path&gt; -> Absolute or relative file path</para>
            </summary>
        </member>
        <member name="P:FlyleafLib.EngineConfig.LogLevel">
            <summary>
            Sets logger's level
            </summary>
        </member>
        <member name="P:FlyleafLib.EngineConfig.LogAppend">
            <summary>
            When the output is file it will append instead of overwriting
            </summary>
        </member>
        <member name="P:FlyleafLib.EngineConfig.LogCachedLines">
            <summary>
            Lines to cache before writing them to file
            </summary>
        </member>
        <member name="P:FlyleafLib.EngineConfig.LogDateTimeFormat">
            <summary>
            Sets the logger's datetime string format
            </summary>
        </member>
        <member name="P:FlyleafLib.EngineConfig.PluginsPath">
            <summary>
            <para>Required to register plugins. Make sure you provide x86 or x64 based on your project and same .NET framework.</para>
            <para>:&lt;path&gt; for relative path from current folder or any below</para>
            <para>&lt;path&gt; for absolute or relative path</para>
            </summary>
        </member>
        <member name="P:FlyleafLib.EngineConfig.UICurTimePerSecond">
            <summary>
            Updates Player.CurTime when the second changes otherwise on every UIRefreshInterval
            </summary>
        </member>
        <member name="P:FlyleafLib.EngineConfig.UIRefresh">
            <summary>
            <para>Activates Master Thread to monitor all the players and perform the required updates</para>
            <para>Required for Activity Mode, Stats &amp; Buffered Duration on Pause</para>
            </summary>
        </member>
        <member name="P:FlyleafLib.EngineConfig.UIRefreshInterval">
            <summary>
            <para>How often should update the UI in ms (low values can cause performance issues)</para>
            <para>Should UIRefreshInterval &lt; 1000ms and 1000 % UIRefreshInterval == 0 for accurate per second stats</para>
            </summary>
        </member>
        <member name="M:FlyleafLib.EngineConfig.Load(System.String)">
            <summary>
            Loads engine's configuration
            </summary>
            <param name="path">Absolute or relative path to load the configuraiton</param>
            <returns></returns>
        </member>
        <member name="M:FlyleafLib.EngineConfig.Save(System.String)">
            <summary>
            Saves engine's current configuration
            </summary>
            <param name="path">Absolute or relative path to save the configuration</param>
        </member>
        <member name="P:FlyleafLib.AudioEngine.Failed">
            <summary>
            Whether no audio devices were found or audio failed to initialize
            </summary>
        </member>
        <member name="P:FlyleafLib.AudioEngine.CapDevices">
            <summary>
            List of Audio Capture Devices
            </summary>
        </member>
        <member name="P:FlyleafLib.AudioEngine.Devices">
            <summary>
            List of Audio Devices
            </summary>
        </member>
        <member name="T:FlyleafLib.Engine">
            <summary>
            Flyleaf Engine
            </summary>
        </member>
        <member name="P:FlyleafLib.Engine.IsLoaded">
            <summary>
            Engine has been loaded and is ready for use
            </summary>
        </member>
        <member name="P:FlyleafLib.Engine.Config">
            <summary>
            Engine's configuration
            </summary>
        </member>
        <member name="P:FlyleafLib.Engine.Audio">
            <summary>
            Audio Engine
            </summary>
        </member>
        <member name="P:FlyleafLib.Engine.Video">
            <summary>
            Video Engine
            </summary>
        </member>
        <member name="P:FlyleafLib.Engine.Plugins">
            <summary>
            Plugins Engine
            </summary>
        </member>
        <member name="P:FlyleafLib.Engine.FFmpeg">
            <summary>
            FFmpeg Engine
            </summary>
        </member>
        <member name="P:FlyleafLib.Engine.Players">
            <summary>
            List of active Players
            </summary>
        </member>
        <member name="M:FlyleafLib.Engine.Start(FlyleafLib.EngineConfig)">
            <summary>
            Initializes Flyleaf's Engine (Must be called from UI thread)
            </summary>
            <param name="config">Engine's configuration</param>
        </member>
        <member name="M:FlyleafLib.Engine.StartAsync(FlyleafLib.EngineConfig)">
            <summary>
            Initializes Flyleaf's Engine Async (Must be called from UI thread)
            </summary>
            <param name="config">Engine's configuration</param>
        </member>
        <member name="M:FlyleafLib.Engine.TimeBeginPeriod1">
            <summary>
            Requests timeBeginPeriod(1) - You should call TimeEndPeriod1 when not required anymore
            </summary>
        </member>
        <member name="M:FlyleafLib.Engine.TimeEndPeriod1">
            <summary>
            Stops previously requested timeBeginPeriod(1)
            </summary>
        </member>
        <member name="M:FlyleafLib.PluginsEngine.LoadPlugin(System.Reflection.Assembly)">
            <summary>
            Manually load plugins
            </summary>
            <param name="assembly">The assembly to search for plugins</param>
        </member>
        <member name="P:FlyleafLib.VideoEngine.CapDevices">
            <summary>
            List of Video Capture Devices
            </summary>
        </member>
        <member name="P:FlyleafLib.VideoEngine.GPUAdapters">
            <summary>
            List of GPU Adpaters <see cref="P:FlyleafLib.Config.VideoConfig.GPUAdapter"/>
            </summary>
        </member>
        <member name="P:FlyleafLib.VideoEngine.Screens">
            <summary>
            List of GPU Outputs from default GPU Adapter (Note: will no be updated on screen connect/disconnect)
            </summary>
        </member>
        <member name="P:FlyleafLib.MediaFramework.MediaContext.DecoderContext.RequiresResync">
            <summary>
            It will not resync by itself. Requires manual call to ReSync()
            </summary>
        </member>
        <member name="T:FlyleafLib.MediaFramework.MediaContext.Downloader">
            <summary>
            Downloads or remuxes to different format any ffmpeg valid input url
            </summary>
        </member>
        <member name="P:FlyleafLib.MediaFramework.MediaContext.Downloader.DecCtx">
            <summary>
            The backend demuxer. Access this to enable the required streams for downloading
            </summary>
        </member>
        <member name="P:FlyleafLib.MediaFramework.MediaContext.Downloader.Remuxer">
            <summary>
            The backend remuxer. Normally you shouldn't access this
            </summary>
        </member>
        <member name="P:FlyleafLib.MediaFramework.MediaContext.Downloader.CurTime">
            <summary>
            The current timestamp of the frame starting from 0 (Ticks)
            </summary>
        </member>
        <member name="P:FlyleafLib.MediaFramework.MediaContext.Downloader.Duration">
            <summary>
            The total duration of the input (Ticks)
            </summary>
        </member>
        <member name="P:FlyleafLib.MediaFramework.MediaContext.Downloader.DownloadPercentage">
            <summary>
            The percentage of the current download process (0 for live streams)
            </summary>
        </member>
        <member name="E:FlyleafLib.MediaFramework.MediaContext.Downloader.DownloadCompleted">
            <summary>
            Fires on download completed or failed
            </summary>
        </member>
        <member name="M:FlyleafLib.MediaFramework.MediaContext.Downloader.Open(System.String,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Opens a new media file (audio/video) and prepares it for download (blocking)
            </summary>
            <param name="url">Media file's url</param>
            <param name="defaultPlaylistItem">Whether to open the default input (in case of multiple inputs eg. from bitswarm/youtube-dl, you might want to choose yours)</param>
            <param name="defaultVideo">Whether to open the default video stream from plugin suggestions</param>
            <param name="defaultAudio">Whether to open the default audio stream from plugin suggestions</param>
            <returns></returns>
        </member>
        <member name="M:FlyleafLib.MediaFramework.MediaContext.Downloader.Open(System.IO.Stream,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Opens a new media file (audio/video) and prepares it for download (blocking)
            </summary>
            <param name="stream">Media Stream</param>
            <param name="defaultPlaylistItem">Whether to open the default input (in case of multiple inputs eg. from bitswarm/youtube-dl, you might want to choose yours)</param>
            <param name="defaultVideo">Whether to open the default video stream from plugin suggestions</param>
            <param name="defaultAudio">Whether to open the default audio stream from plugin suggestions</param>
            <returns></returns>
        </member>
        <member name="M:FlyleafLib.MediaFramework.MediaContext.Downloader.Download(System.String@,System.Boolean)">
            <summary>
            Downloads the currently configured AVS streams
            </summary>
            <param name="filename">The filename for the downloaded video. The file extension will let the demuxer to choose the output format (eg. mp4). If you useRecommendedExtension will be updated with the extension.</param>
            <param name="useRecommendedExtension">Will try to match the output container with the input container</param>
        </member>
        <member name="M:FlyleafLib.MediaFramework.MediaContext.Downloader.Dispose">
            <summary>
            Stops and disposes the downloader
            </summary>
        </member>
        <member name="T:FlyleafLib.MediaFramework.MediaDecoder.Filter">
            <summary>
            FFmpeg Filter
            </summary>
        </member>
        <member name="P:FlyleafLib.MediaFramework.MediaDecoder.Filter.Id">
            <summary>
            <para>
            FFmpeg valid filter id
            (Required only to send commands)
            </para>
            </summary>
        </member>
        <member name="P:FlyleafLib.MediaFramework.MediaDecoder.Filter.Name">
            <summary>
            FFmpeg valid filter name
            </summary>
        </member>
        <member name="P:FlyleafLib.MediaFramework.MediaDecoder.Filter.Args">
            <summary>
            FFmpeg valid filter args
            </summary>
        </member>
        <member name="M:FlyleafLib.MediaFramework.MediaDecoder.VideoDecoder.GetFrame(System.Int32)">
            <summary>
            Performs accurate seeking to the requested VideoFrame and returns it
            </summary>
            <param name="index">Zero based frame index</param>
            <returns>The requested VideoFrame or null on failure</returns>
        </member>
        <member name="M:FlyleafLib.MediaFramework.MediaDecoder.VideoDecoder.GetFrameNext">
            <summary>
            Gets next VideoFrame (Decoder/Demuxer must not be running)
            </summary>
            <returns>The next VideoFrame</returns>
        </member>
        <member name="M:FlyleafLib.MediaFramework.MediaDecoder.VideoDecoder.DecodeFrameNext">
            <summary>
            Pushes the decoder to the next available VideoFrame (Decoder/Demuxer must not be running)
            </summary>
            <returns></returns>
        </member>
        <member name="P:FlyleafLib.MediaFramework.MediaDemuxer.Demuxer.CurTime">
            <summary>
            The time of first packet in the queue (zero based, substracts start time)
            </summary>
        </member>
        <member name="P:FlyleafLib.MediaFramework.MediaDemuxer.Demuxer.BufferedDuration">
            <summary>
            The buffered time in the queue (last packet time - first packet time)
            </summary>
        </member>
        <member name="M:FlyleafLib.MediaFramework.MediaDemuxer.Demuxer.GetNextVideoPacket">
            <summary>
            Gets next VideoPacket from the existing queue or demuxes it if required (Demuxer must not be running)
            </summary>
            <returns>0 on success</returns>
        </member>
        <member name="M:FlyleafLib.MediaFramework.MediaDemuxer.Demuxer.GetNextPacket(System.Int32)">
            <summary>
            Pushes the demuxer to the next available packet (Demuxer must not be running)
            </summary>
            <param name="streamIndex">Packet's stream index</param>
            <returns>0 on success</returns>
        </member>
        <member name="P:FlyleafLib.MediaFramework.MediaDemuxer.DemuxerInput.Url">
            <summary>
            Url provided as a demuxer input
            </summary>
        </member>
        <member name="P:FlyleafLib.MediaFramework.MediaDemuxer.DemuxerInput.UrlFallback">
            <summary>
            Fallback url provided as a demuxer input
            </summary>
        </member>
        <member name="P:FlyleafLib.MediaFramework.MediaDemuxer.DemuxerInput.IOStream">
            <summary>
            IOStream provided as a demuxer input
            </summary>
        </member>
        <member name="T:FlyleafLib.MediaFramework.MediaFrame.ParseSubtitles">
            <summary>
            Default Subtitles Parser
            </summary>
        </member>
        <member name="P:FlyleafLib.MediaFramework.MediaPlaylist.Playlist.Url">
            <summary>
            Url provided by user
            </summary>
        </member>
        <member name="P:FlyleafLib.MediaFramework.MediaPlaylist.Playlist.IOStream">
            <summary>
            IOStream provided by user
            </summary>
        </member>
        <member name="P:FlyleafLib.MediaFramework.MediaPlaylist.Playlist.FolderBase">
            <summary>
            Playlist's folder base which can be used to save related files
            </summary>
        </member>
        <member name="P:FlyleafLib.MediaFramework.MediaPlaylist.Playlist.Title">
            <summary>
            Playlist's title
            </summary>
        </member>
        <member name="P:FlyleafLib.MediaFramework.MediaPlaylist.Playlist.Selected">
            <summary>
            Playlist's opened/selected item
            </summary>
        </member>
        <member name="P:FlyleafLib.MediaFramework.MediaPlaylist.Playlist.InputType">
            <summary>
            Type of the provided input (such as File, UNC, Torrent, Web, etc.)
            </summary>
        </member>
        <member name="P:FlyleafLib.MediaFramework.MediaPlaylist.PlaylistItem.DirectUrl">
            <summary>
            While the Url can expire or be null DirectUrl can be used as a new input for re-opening
            </summary>
        </member>
        <member name="P:FlyleafLib.MediaFramework.MediaPlaylist.PlaylistItem.Folder">
            <summary>
            Relative folder to playlist's folder base (can be empty, not null)
            Use Path.Combine(Playlist.FolderBase, Folder) to get absolute path for saving related files with the current selection item (such as subtitles)
            </summary>
        </member>
        <member name="P:FlyleafLib.MediaFramework.MediaPlaylist.PlaylistItem.FileSize">
            <summary>
            Item's file size
            </summary>
        </member>
        <member name="P:FlyleafLib.MediaFramework.MediaPlaylist.PlaylistItem.Title">
            <summary>
            Item's title
            (can be updated from scrapers)
            </summary>
        </member>
        <member name="P:FlyleafLib.MediaFramework.MediaPlaylist.PlaylistItem.OriginalTitle">
            <summary>
            Item's original title
            (setted by opened plugin)
            </summary>
        </member>
        <member name="P:FlyleafLib.MediaFramework.MediaPlaylist.PlaylistItem.Enabled">
            <summary>
            Whether the item is currently enabled or not
            </summary>
        </member>
        <member name="P:FlyleafLib.MediaFramework.MediaRenderer.Renderer.Zoom">
            <summary>
            Zoom percentage (100% equals to 1.0)
            </summary>
        </member>
        <member name="M:FlyleafLib.MediaFramework.MediaRenderer.Renderer.GetBitmap(System.Int32,System.Int32,FlyleafLib.MediaFramework.MediaFrame.VideoFrame)">
            <summary>
            Gets bitmap from a video frame
            </summary>
            <param name="width">Specify the width (-1: will keep the ratio based on height)</param>
            <param name="height">Specify the height (-1: will keep the ratio based on width)</param>
            <param name="frame">Video frame to process (null: will use the current/last frame)</param>
            <returns></returns>
        </member>
        <member name="M:FlyleafLib.MediaFramework.MediaRenderer.Renderer.ExtractFrame(FlyleafLib.MediaFramework.MediaFrame.VideoFrame)">
            <summary>
            Extracts a bitmap from a video frame
            (Currently cannot be used in parallel with the rendering)
            </summary>
            <param name="frame"></param>
            <returns></returns>
        </member>
        <member name="M:FlyleafLib.MediaFramework.MediaRenderer.Renderer.ZoomWithCenterPoint(System.Windows.Point,System.Double)">
            <summary>
            Zooms in a way that the specified point before zoom will be at the same position after zoom
            </summary>
            <param name="p"></param>
            <param name="zoom"></param>
        </member>
        <member name="P:FlyleafLib.MediaFramework.MediaStream.ExternalStream.Enabled">
            <summary>
            Whether the item is currently enabled or not
            </summary>
        </member>
        <member name="P:FlyleafLib.MediaFramework.MediaStream.ExternalStream.OpenedCounter">
            <summary>
            Times this item has been used/opened
            </summary>
        </member>
        <member name="P:FlyleafLib.MediaPlayer.Activity.IsEnabled">
            <summary>
            Should use Timeout to Enable/Disable it. Use this only for temporary disable.
            </summary>
        </member>
        <member name="M:FlyleafLib.MediaPlayer.Activity.SetMode">
            <summary>
            Updates Mode UI value and shows/hides mouse cursor if required
            Must be called from a UI Thread
            </summary>
        </member>
        <member name="M:FlyleafLib.MediaPlayer.Activity.RefreshMode">
            <summary>
            Refreshes mode value based on current timestamps
            </summary>
        </member>
        <member name="M:FlyleafLib.MediaPlayer.Activity.ForceIdle">
            <summary>
            Sets Mode to Idle
            </summary>
        </member>
        <member name="M:FlyleafLib.MediaPlayer.Activity.ForceActive">
            <summary>
            Sets Mode to Active
            </summary>
        </member>
        <member name="M:FlyleafLib.MediaPlayer.Activity.ForceFullActive">
            <summary>
            Sets Mode to Full Active
            </summary>
        </member>
        <member name="M:FlyleafLib.MediaPlayer.Activity.RefreshActive">
            <summary>
            Updates Active Timestamp
            </summary>
        </member>
        <member name="M:FlyleafLib.MediaPlayer.Activity.RefreshFullActive">
            <summary>
            Updates Full Active Timestamp
            </summary>
        </member>
        <member name="P:FlyleafLib.MediaPlayer.Audio.Streams">
            <summary>
            Embedded Streams
            </summary>
        </member>
        <member name="P:FlyleafLib.MediaPlayer.Audio.IsOpened">
            <summary>
            Whether the input has audio and it is configured
            </summary>
        </member>
        <member name="P:FlyleafLib.MediaPlayer.Audio.ChannelsOut">
            <summary>
            Audio player's channels out (currently 2 channels supported only)
            </summary>
        </member>
        <member name="P:FlyleafLib.MediaPlayer.Audio.SampleRate">
            <summary>
            Audio sample rate (in/out)
            </summary>
        </member>
        <member name="P:FlyleafLib.MediaPlayer.Audio.Volume">
            <summary>
            Audio player's volume / amplifier (valid values 0 - no upper limit)
            </summary>
        </member>
        <member name="P:FlyleafLib.MediaPlayer.Audio.Mute">
            <summary>
            Audio player's mute
            </summary>
        </member>
        <member name="P:FlyleafLib.MediaPlayer.Audio.Device">
            <summary>
            <para>Audio player's current device (available devices can be found on <see cref="P:FlyleafLib.Engine.Audio"/>)/></para>
            </summary>
        </member>
        <member name="M:FlyleafLib.MediaPlayer.Audio.ReloadFilters">
            <summary>
            Reloads filters from Config.Audio.Filters (experimental)
            </summary>
            <returns>0 on success</returns>
        </member>
        <member name="M:FlyleafLib.MediaPlayer.Audio.UpdateFilter(System.String,System.String,System.String)">
            <summary>
            <para>
            Updates filter's property (experimental)
            Note: This will not update the property value in Config.Audio.Filters
            </para>
            </summary>
            <param name="filterId">Filter's unique id specified in Config.Audio.Filters</param>
            <param name="key">Filter's property to change</param>
            <param name="value">Filter's property value</param>
            <returns>0 on success</returns>
        </member>
        <member name="P:FlyleafLib.MediaPlayer.Player.Host">
            <summary>
            FlyleafHost (WinForms, WPF or WinUI)
            </summary>
        </member>
        <member name="P:FlyleafLib.MediaPlayer.Player.Activity">
            <summary>
            Player's Activity (Idle/Active/FullActive)
            </summary>
        </member>
        <member name="P:FlyleafLib.MediaPlayer.Player.Commands">
            <summary>
            Helper ICommands for WPF MVVM
            </summary>
        </member>
        <member name="P:FlyleafLib.MediaPlayer.Player.Audio">
            <summary>
            Player's Audio (In/Out)
            </summary>
        </member>
        <member name="P:FlyleafLib.MediaPlayer.Player.Video">
            <summary>
            Player's Video
            </summary>
        </member>
        <member name="P:FlyleafLib.MediaPlayer.Player.Subtitles">
            <summary>
            Player's Subtitles
            </summary>
        </member>
        <member name="P:FlyleafLib.MediaPlayer.Player.renderer">
            <summary>
            Player's Renderer
            (Normally you should not access this directly)
            </summary>
        </member>
        <member name="P:FlyleafLib.MediaPlayer.Player.decoder">
            <summary>
            Player's Decoder Context
            (Normally you should not access this directly)
            </summary>
        </member>
        <member name="P:FlyleafLib.MediaPlayer.Player.AudioDecoder">
            <summary>
            Audio Decoder
            (Normally you should not access this directly)
            </summary>
        </member>
        <member name="P:FlyleafLib.MediaPlayer.Player.VideoDecoder">
            <summary>
            Video Decoder
            (Normally you should not access this directly)
            </summary>
        </member>
        <member name="P:FlyleafLib.MediaPlayer.Player.SubtitlesDecoder">
            <summary>
            Subtitles Decoder
            (Normally you should not access this directly)
            </summary>
        </member>
        <member name="P:FlyleafLib.MediaPlayer.Player.MainDemuxer">
            <summary>
            Main Demuxer (if video disabled or audio only can be AudioDemuxer instead of VideoDemuxer)
            (Normally you should not access this directly)
            </summary>
        </member>
        <member name="P:FlyleafLib.MediaPlayer.Player.AudioDemuxer">
            <summary>
            Audio Demuxer
            (Normally you should not access this directly)
            </summary>
        </member>
        <member name="P:FlyleafLib.MediaPlayer.Player.VideoDemuxer">
            <summary>
            Video Demuxer
            (Normally you should not access this directly)
            </summary>
        </member>
        <member name="P:FlyleafLib.MediaPlayer.Player.SubtitlesDemuxer">
            <summary>
            Subtitles Demuxer
            (Normally you should not access this directly)
            </summary>
        </member>
        <member name="P:FlyleafLib.MediaPlayer.Player.PlayerId">
            <summary>
            Player's incremental unique id
            </summary>
        </member>
        <member name="P:FlyleafLib.MediaPlayer.Player.Config">
            <summary>
            Player's configuration (set once in the constructor)
            </summary>
        </member>
        <member name="P:FlyleafLib.MediaPlayer.Player.Status">
            <summary>
            Player's Status
            </summary>
        </member>
        <member name="P:FlyleafLib.MediaPlayer.Player.CanPlay">
            <summary>
            Whether the player's status is capable of accepting playback commands
            </summary>
        </member>
        <member name="P:FlyleafLib.MediaPlayer.Player.Chapters">
            <summary>
            The list of chapters
            </summary>
        </member>
        <member name="P:FlyleafLib.MediaPlayer.Player.CurTime">
            <summary>
            Player's current time or user's current seek time (uses backward direction or accurate seek based on Config.Player.SeekAccurate)
            </summary>
        </member>
        <member name="P:FlyleafLib.MediaPlayer.Player.Duration">
            <summary>
            Input's duration
            </summary>
        </member>
        <member name="M:FlyleafLib.MediaPlayer.Player.ForceDuration(System.Int64)">
            <summary>
            Forces Player's and Demuxer's Duration to allow Seek
            </summary>
            <param name="duration">Duration (Ticks)</param>
            <exception cref="T:System.ArgumentNullException">Demuxer must be opened before forcing the duration</exception>
        </member>
        <member name="P:FlyleafLib.MediaPlayer.Player.BufferedDuration">
            <summary>
            The current buffered duration in the demuxer
            </summary>
        </member>
        <member name="P:FlyleafLib.MediaPlayer.Player.IsLive">
            <summary>
            Whether the input is live (duration might not be 0 on live sessions to allow live seek, eg. hls)
            </summary>
        </member>
        <member name="P:FlyleafLib.MediaPlayer.Player.IsRecording">
            <summary>
            Whether the player is recording
            </summary>
        </member>
        <member name="P:FlyleafLib.MediaPlayer.Player.PanXOffset">
            <summary>
            Pan X Offset to change the X location
            </summary>
        </member>
        <member name="P:FlyleafLib.MediaPlayer.Player.PanYOffset">
            <summary>
            Pan Y Offset to change the Y location
            </summary>
        </member>
        <member name="P:FlyleafLib.MediaPlayer.Player.Speed">
            <summary>
            Playback's speed (x1 - x4)
            </summary>
        </member>
        <member name="P:FlyleafLib.MediaPlayer.Player.Zoom">
            <summary>
            Pan zoom percentage (100 for 100%)
            </summary>
        </member>
        <member name="P:FlyleafLib.MediaPlayer.Player.Rotation">
            <summary>
            Pan rotation angle (for D3D11 VP allowed values are 0, 90, 180, 270 only)
            </summary>
        </member>
        <member name="P:FlyleafLib.MediaPlayer.Player.HFlip">
            <summary>
            Pan Horizontal Flip (FlyleafVP only)
            </summary>
        </member>
        <member name="P:FlyleafLib.MediaPlayer.Player.VFlip">
            <summary>
            Pan Vertical Flip (FlyleafVP only)
            </summary>
        </member>
        <member name="P:FlyleafLib.MediaPlayer.Player.ReversePlayback">
            <summary>
            Whether to use reverse playback mode
            </summary>
        </member>
        <member name="M:FlyleafLib.MediaPlayer.Player.Dispose">
            <summary>
            Disposes the Player and de-assigns it from FlyleafHost
            </summary>
        </member>
        <member name="M:FlyleafLib.MediaPlayer.Player.StartRecording">
            <summary>
            Starts recording (uses Config.Player.FolderRecordings and default filename title_curTime)
            </summary>
        </member>
        <member name="M:FlyleafLib.MediaPlayer.Player.StartRecording(System.String@,System.Boolean)">
            <summary>
            Starts recording
            </summary>
            <param name="filename">Path of the new recording file</param>
            <param name="useRecommendedExtension">You can force the output container's format or use the recommended one to avoid incompatibility</param>
        </member>
        <member name="M:FlyleafLib.MediaPlayer.Player.StopRecording">
            <summary>
            Stops recording
            </summary>
        </member>
        <member name="M:FlyleafLib.MediaPlayer.Player.TakeSnapshotToFile(System.String,System.Int32,System.Int32,FlyleafLib.MediaFramework.MediaFrame.VideoFrame)">
            <summary>
            <para>Saves the current video frame (encoding based on file extention .bmp, .png, .jpg)</para>
            <para>If filename not specified will use Config.Player.FolderSnapshots and with default filename title_frameNumber.ext (ext from Config.Player.SnapshotFormat)</para>
            <para>If width/height not specified will use the original size. If one of them will be set, the other one will be set based on original ratio</para>
            <para>If frame not specified will use the current/last frame</para>
            </summary>
            <param name="filename">Specify the filename (null: will use Config.Player.FolderSnapshots and with default filename title_frameNumber.ext (ext from Config.Player.SnapshotFormat)</param>
            <param name="width">Specify the width (-1: will keep the ratio based on height)</param>
            <param name="height">Specify the height (-1: will keep the ratio based on width)</param>
            <param name="frame">Specify the frame (null: will use the current/last frame)</param>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="M:FlyleafLib.MediaPlayer.Player.TakeSnapshotToBitmap(System.Int32,System.Int32,FlyleafLib.MediaFramework.MediaFrame.VideoFrame)">
            <summary>
            <para>Returns a bitmap of the current or specified video frame</para>
            <para>If width/height not specified will use the original size. If one of them will be set, the other one will be set based on original ratio</para>
            <para>If frame not specified will use the current/last frame</para>
            </summary>
            <param name="width">Specify the width (-1: will keep the ratio based on height)</param>
            <param name="height">Specify the height (-1: will keep the ratio based on width)</param>
            <param name="frame">Specify the frame (null: will use the current/last frame)</param>
            <returns></returns>
        </member>
        <member name="M:FlyleafLib.MediaPlayer.Player.ZoomIn(System.Windows.Point)">
            <summary>
            Pan zoom in with center point
            </summary>
            <param name="p"></param>
        </member>
        <member name="M:FlyleafLib.MediaPlayer.Player.ZoomOut(System.Windows.Point)">
            <summary>
            Pan zoom out with center point
            </summary>
            <param name="p"></param>
        </member>
        <member name="M:FlyleafLib.MediaPlayer.Player.SetZoom(System.Double)">
            <summary>
            Pan zoom (no raise)
            </summary>
            <param name="zoom"></param>
        </member>
        <member name="M:FlyleafLib.MediaPlayer.Player.SetZoomCenter(System.Windows.Point)">
            <summary>
            Pan zoom's center point (no raise, no center point change)
            </summary>
            <param name="p"></param>
        </member>
        <member name="M:FlyleafLib.MediaPlayer.Player.SetZoomAndCenter(System.Double,System.Windows.Point)">
            <summary>
            Pan zoom and center point (no raise)
            </summary>
            <param name="zoom"></param>
            <param name="p"></param>
        </member>
        <member name="M:FlyleafLib.MediaPlayer.Player.KeyDown(FlyleafLib.MediaPlayer.Player,System.Windows.Input.KeyEventArgs)">
            <summary>
            Can be used to route KeyDown events (WPF)
            </summary>
            <param name="player"></param>
            <param name="e"></param>
        </member>
        <member name="M:FlyleafLib.MediaPlayer.Player.KeyDown(FlyleafLib.MediaPlayer.Player,System.Windows.Forms.KeyEventArgs)">
            <summary>
            Can be used to route KeyDown events (WinForms)
            </summary>
            <param name="player"></param>
            <param name="e"></param>
        </member>
        <member name="M:FlyleafLib.MediaPlayer.Player.KeyUp(FlyleafLib.MediaPlayer.Player,System.Windows.Input.KeyEventArgs)">
            <summary>
            Can be used to route KeyUp events (WPF)
            </summary>
            <param name="player"></param>
            <param name="e"></param>
        </member>
        <member name="M:FlyleafLib.MediaPlayer.Player.KeyUp(FlyleafLib.MediaPlayer.Player,System.Windows.Forms.KeyEventArgs)">
            <summary>
            Can be used to route KeyUp events (WinForms)
            </summary>
            <param name="player"></param>
            <param name="e"></param>
        </member>
        <member name="M:FlyleafLib.MediaPlayer.Player.Open(System.String,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Opens a new media file (audio/subtitles/video)
            </summary>
            <param name="url">Media file's url</param>
            <param name="defaultPlaylistItem">Whether to open the first/default item in case of playlist</param>
            <param name="defaultVideo">Whether to open the default video stream from plugin suggestions</param>
            <param name="defaultAudio">Whether to open the default audio stream from plugin suggestions</param>
            <param name="defaultSubtitles">Whether to open the default subtitles stream from plugin suggestions</param>
            <returns></returns>
        </member>
        <member name="M:FlyleafLib.MediaPlayer.Player.OpenAsync(System.String,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Opens a new media file (audio/subtitles/video) without blocking
            You can get the results from <see cref="E:FlyleafLib.MediaPlayer.Player.OpenCompleted"/>
            </summary>
            <param name="url">Media file's url</param>
            <param name="defaultPlaylistItem">Whether to open the first/default item in case of playlist</param>
            <param name="defaultVideo">Whether to open the default video stream from plugin suggestions</param>
            <param name="defaultAudio">Whether to open the default audio stream from plugin suggestions</param>
            <param name="defaultSubtitles">Whether to open the default subtitles stream from plugin suggestions</param>
        </member>
        <member name="M:FlyleafLib.MediaPlayer.Player.Open(System.IO.Stream,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Opens a new media I/O stream (audio/video) without blocking
            </summary>
            <param name="iostream">Media stream</param>
            <param name="defaultPlaylistItem">Whether to open the first/default item in case of playlist</param>
            <param name="defaultVideo">Whether to open the default video stream from plugin suggestions</param>
            <param name="defaultAudio">Whether to open the default audio stream from plugin suggestions</param>
            <param name="defaultSubtitles">Whether to open the default subtitles stream from plugin suggestions</param>
            <returns></returns>
        </member>
        <member name="M:FlyleafLib.MediaPlayer.Player.OpenAsync(System.IO.Stream,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Opens a new media I/O stream (audio/video) without blocking
            You can get the results from <see cref="E:FlyleafLib.MediaPlayer.Player.OpenCompleted"/>
            </summary>
            <param name="iostream">Media stream</param>
            <param name="defaultPlaylistItem">Whether to open the first/default item in case of playlist</param>
            <param name="defaultVideo">Whether to open the default video stream from plugin suggestions</param>
            <param name="defaultAudio">Whether to open the default audio stream from plugin suggestions</param>
            <param name="defaultSubtitles">Whether to open the default subtitles stream from plugin suggestions</param>
        </member>
        <member name="M:FlyleafLib.MediaPlayer.Player.Open(FlyleafLib.MediaFramework.MediaPlaylist.Session)">
            <summary>
            Opens a new media session
            </summary>
            <param name="session">Media session</param>
            <returns></returns>
        </member>
        <member name="M:FlyleafLib.MediaPlayer.Player.OpenAsync(FlyleafLib.MediaFramework.MediaPlaylist.Session)">
            <summary>
            Opens a new media session without blocking
            </summary>
            <param name="session">Media session</param>
        </member>
        <member name="M:FlyleafLib.MediaPlayer.Player.Open(FlyleafLib.MediaFramework.MediaPlaylist.PlaylistItem,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Opens a playlist item <see cref="P:FlyleafLib.MediaFramework.MediaPlaylist.Playlist.Items"/>
            </summary>
            <param name="item">The playlist item to open</param>
            <param name="defaultVideo">Whether to open the default video stream from plugin suggestions</param>
            <param name="defaultAudio">Whether to open the default audio stream from plugin suggestions</param>
            <param name="defaultSubtitles">Whether to open the default subtitles stream from plugin suggestions</param>
            <returns></returns>
        </member>
        <member name="M:FlyleafLib.MediaPlayer.Player.OpenAsync(FlyleafLib.MediaFramework.MediaPlaylist.PlaylistItem,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Opens a playlist item <see cref="P:FlyleafLib.MediaFramework.MediaPlaylist.Playlist.Items"/> without blocking
            You can get the results from <see cref="E:FlyleafLib.MediaPlayer.Player.OpenPlaylistItemCompleted"/>
            </summary>
            <param name="item">The playlist item to open</param>
            <param name="defaultVideo">Whether to open the default video stream from plugin suggestions</param>
            <param name="defaultAudio">Whether to open the default audio stream from plugin suggestions</param>
            <param name="defaultSubtitles">Whether to open the default subtitles stream from plugin suggestions</param>
            <returns></returns>
        </member>
        <member name="M:FlyleafLib.MediaPlayer.Player.Open(FlyleafLib.MediaFramework.MediaStream.ExternalStream,System.Boolean,System.Boolean,System.Int32)">
            <summary>
            Opens an external stream (audio/subtitles/video)
            </summary>
            <param name="extStream">The external stream to open</param>
            <param name="resync">Whether to force resync with other streams</param>
            <param name="defaultAudio">Whether to open the default audio stream from plugin suggestions</param>
            <param name="streamIndex">-2: None, -1: Suggested/Default, X: Specified embedded stream index</param>
            <returns></returns>
        </member>
        <member name="M:FlyleafLib.MediaPlayer.Player.OpenAsync(FlyleafLib.MediaFramework.MediaStream.ExternalStream,System.Boolean,System.Boolean)">
            <summary>
            Opens an external stream (audio/subtitles/video) without blocking
            You can get the results from <see cref="E:FlyleafLib.MediaPlayer.Player.OpenExternalAudioStreamCompleted"/>, <see cref="E:FlyleafLib.MediaPlayer.Player.OpenExternalVideoStreamCompleted"/>, <see cref="E:FlyleafLib.MediaPlayer.Player.OpenExternalSubtitlesStreamCompleted"/>
            </summary>
            <param name="extStream">The external stream to open</param>
            <param name="resync">Whether to force resync with other streams</param>
            <param name="defaultAudio">Whether to open the default audio stream from plugin suggestions</param>
        </member>
        <member name="M:FlyleafLib.MediaPlayer.Player.Open(FlyleafLib.MediaFramework.MediaStream.StreamBase,System.Boolean,System.Boolean)">
            <summary>
            Opens an embedded stream (audio/subtitles/video)
            </summary>
            <param name="stream">An existing Player's media stream</param>
            <param name="resync">Whether to force resync with other streams</param>
            <param name="defaultAudio">Whether to re-suggest audio based on the new video stream (has effect only on VideoStream)</param>
            <returns></returns>
        </member>
        <member name="M:FlyleafLib.MediaPlayer.Player.OpenAsync(FlyleafLib.MediaFramework.MediaStream.StreamBase,System.Boolean,System.Boolean)">
            <summary>
            Opens an embedded stream (audio/subtitles/video) without blocking
            You can get the results from <see cref="E:FlyleafLib.MediaPlayer.Player.OpenAudioStreamCompleted"/>, <see cref="E:FlyleafLib.MediaPlayer.Player.OpenVideoStreamCompleted"/>, <see cref="E:FlyleafLib.MediaPlayer.Player.OpenSubtitlesStreamCompleted"/>
            </summary>
            <param name="stream">An existing Player's media stream</param>
            <param name="resync">Whether to force resync with other streams</param>
            <param name="defaultAudio">Whether to re-suggest audio based on the new video stream (has effect only on VideoStream)</param>
        </member>
        <member name="M:FlyleafLib.MediaPlayer.Player.GetSession(FlyleafLib.MediaFramework.MediaPlaylist.PlaylistItem)">
            <summary>
            Gets a session that can be re-opened later on with <see cref="M:FlyleafLib.MediaPlayer.Player.Open(FlyleafLib.MediaFramework.MediaPlaylist.Session)"/>
            </summary>
            <param name="item">The current selected playlist item if null</param>
            <returns></returns>
        </member>
        <member name="E:FlyleafLib.MediaPlayer.Player.PlaybackStopped">
            <summary>
            Fires on playback stopped by an error or completed / ended successfully <see cref="P:FlyleafLib.MediaPlayer.Player.Status"/>
            Warning: Uses Invoke and it comes from playback thread so you can't pause/stop etc. You need to use another thread if you have to.
            </summary>
        </member>
        <member name="E:FlyleafLib.MediaPlayer.Player.SeekCompleted">
            <summary>
            Fires on seek completed for the specified ms (ms will be -1 on failure)
            </summary>
        </member>
        <member name="M:FlyleafLib.MediaPlayer.Player.Play">
            <summary>
            Plays AVS streams
            </summary>
        </member>
        <member name="M:FlyleafLib.MediaPlayer.Player.Pause">
            <summary>
            Pauses AVS streams
            </summary>
        </member>
        <member name="M:FlyleafLib.MediaPlayer.Player.Seek(System.Int32,System.Boolean)">
            <summary>
            Seeks backwards or forwards based on the specified ms to the nearest keyframe
            </summary>
            <param name="ms"></param>
            <param name="forward"></param>
        </member>
        <member name="M:FlyleafLib.MediaPlayer.Player.SeekAccurate(System.Int32)">
            <summary>
            Seeks at the exact timestamp (with half frame distance accuracy)
            </summary>
            <param name="ms"></param>
        </member>
        <member name="M:FlyleafLib.MediaPlayer.Player.Flush">
            <summary>
            Flushes the buffer (demuxers (packets) and decoders (frames))
            This is useful mainly for live streams to push the playback at very end (low latency)
            </summary>
        </member>
        <member name="M:FlyleafLib.MediaPlayer.Player.Stop">
            <summary>
            Stops and Closes AVS streams
            </summary>
        </member>
        <member name="E:FlyleafLib.MediaPlayer.Player.BufferingStarted">
            <summary>
            Fires on buffering started
            Warning: Uses Invoke and it comes from playback thread so you can't pause/stop etc. You need to use another thread if you have to.
            </summary>
        </member>
        <member name="E:FlyleafLib.MediaPlayer.Player.BufferingCompleted">
            <summary>
            Fires on buffering completed (will fire also on failed buffering completed)
            (BufferDration > Config.Player.MinBufferDuration)
            Warning: Uses Invoke and it comes from playback thread so you can't pause/stop etc. You need to use another thread if you have to.
            </summary>
        </member>
        <member name="P:FlyleafLib.MediaPlayer.KeysConfig.Keys">
            <summary>
            Currently configured key bindings
            (Normally you should not access this directly)
            </summary>
        </member>
        <member name="M:FlyleafLib.MediaPlayer.KeysConfig.AddCustom(System.Windows.Input.Key,System.Boolean,System.Action,System.String,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Adds a custom keybinding
            </summary>
            <param name="key">The key to bind</param>
            <param name="isKeyUp">If should fire on each keydown or just on keyup</param>
            <param name="action">The action to execute</param>
            <param name="actionName">A unique name to be able to identify it</param>
            <param name="alt">If Alt should be pressed</param>
            <param name="ctrl">If Ctrl should be pressed</param>
            <param name="shift">If Shift should be pressed</param>
            <exception cref="T:System.Exception">Keybinding already exists</exception>
        </member>
        <member name="M:FlyleafLib.MediaPlayer.KeysConfig.Add(System.Windows.Input.Key,FlyleafLib.MediaPlayer.KeyBindingAction,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Adds a new key binding
            </summary>
            <param name="key">The key to bind</param>
            <param name="action">Which action from the available to assign</param>
            <param name="alt">If Alt should be pressed</param>
            <param name="ctrl">If Ctrl should be pressed</param>
            <param name="shift">If Shift should be pressed</param>
            <exception cref="T:System.Exception">Keybinding already exists</exception>
        </member>
        <member name="M:FlyleafLib.MediaPlayer.KeysConfig.Remove(System.Windows.Input.Key,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Removes a binding based on Key/Ctrl combination
            </summary>
            <param name="key">The assigned key</param>
            <param name="alt">If Alt is assigned</param>
            <param name="ctrl">If Ctrl is assigned</param>
            <param name="shift">If Shift is assigned</param>
        </member>
        <member name="M:FlyleafLib.MediaPlayer.KeysConfig.Remove(FlyleafLib.MediaPlayer.KeyBindingAction)">
            <summary>
            Removes a binding based on assigned action
            </summary>
            <param name="action">The assigned action</param>
        </member>
        <member name="M:FlyleafLib.MediaPlayer.KeysConfig.Remove(System.String)">
            <summary>
            Removes a binding based on assigned action's name
            </summary>
            <param name="actionName">The assigned action's name</param>
        </member>
        <member name="M:FlyleafLib.MediaPlayer.KeysConfig.RemoveAll">
            <summary>
            Removes all the bindings
            </summary>
        </member>
        <member name="M:FlyleafLib.MediaPlayer.KeysConfig.LoadDefault">
            <summary>
            Resets to default bindings
            </summary>
        </member>
        <member name="M:FlyleafLib.MediaPlayer.KeyBinding.SetAction(System.Action,System.Boolean)">
            <summary>
            Sets action for custom key binding
            </summary>
            <param name="action"></param>
            <param name="isKeyUp"></param>
        </member>
        <member name="P:FlyleafLib.MediaPlayer.Subtitles.Streams">
            <summary>
            Embedded Streams
            </summary>
        </member>
        <member name="P:FlyleafLib.MediaPlayer.Subtitles.IsOpened">
            <summary>
            Whether the input has subtitles and it is configured
            </summary>
        </member>
        <member name="P:FlyleafLib.MediaPlayer.Subtitles.SubsText">
            <summary>
            Subtitles Text (updates dynamically while playing based on the duration that it should be displayed)
            </summary>
        </member>
        <member name="P:FlyleafLib.MediaPlayer.Video.Streams">
            <summary>
            Embedded Streams
            </summary>
        </member>
        <member name="P:FlyleafLib.MediaPlayer.Video.IsOpened">
            <summary>
            Whether the input has video and it is configured
            </summary>
        </member>
        <member name="P:FlyleafLib.MediaPlayer.Video.FramesTotal">
            <summary>
            Total Frames
            </summary>
        </member>
        <member name="P:FlyleafLib.MediaPlayer.Video.FPSCurrent">
            <summary>
            Actual Frames rendered per second (FPS)
            </summary>
        </member>
        <member name="M:FlyleafLib.Plugins.ISuggestSubtitles.SuggestSubtitles(FlyleafLib.MediaFramework.MediaStream.SubtitlesStream@,FlyleafLib.MediaFramework.MediaStream.ExternalSubtitlesStream@)">
            <summary>
            Suggests from all the available subtitles
            </summary>
            <param name="stream">Embedded stream</param>
            <param name="extStream">External stream</param>
        </member>
        <member name="M:FlyleafLib.Plugins.ISuggestBestExternalSubtitles.SuggestBestExternalSubtitles">
            <summary>
            Suggests only if best match exists (to avoid search local/online)
            </summary>
            <returns></returns>
        </member>
        <member name="M:FlyleafLib.Logger.ForceFlush">
            <summary>
            Forces cached file data to be written to the file
            </summary>
        </member>
        <member name="M:FlyleafLib.Utils.UI(System.Action)">
            <summary>
            Begin invokes the UI thread if required to execute the specified action
            </summary>
            <param name="action"></param>
        </member>
        <member name="M:FlyleafLib.Utils.UIInvoke(System.Action)">
            <summary>
            Invokes the UI thread to execute the specified action
            </summary>
            <param name="action"></param>
        </member>
        <member name="M:FlyleafLib.Utils.UIInvokeIfRequired(System.Action)">
            <summary>
            Invokes the UI thread if required to execute the specified action
            </summary>
            <param name="action"></param>
        </member>
        <member name="M:FlyleafLib.Utils.AddFirewallRule(System.String,System.String)">
            <summary>
            Adds a windows firewall rule if not already exists for the specified program path
            </summary>
            <param name="ruleName">Default value is Flyleaf</param>
            <param name="path">Default value is current executable path</param>
        </member>
        <member name="T:FFmpeg.AutoGen.ffmpegEx">
            <summary>
            Additional bindings required by Flyleaf (mostly private- ensure dll's are same versions)
            </summary>
        </member>
    </members>
</doc>
